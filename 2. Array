In programming, an array is a contiguous block of memory locations 
that hold elements of the same data type. t can be used to store the 
collection of primitive data types such as int, char, float, etc., and also derived 
and user-defined data types such as pointers, structures, etc.
You can access individual elements using an index.

We can declare an array by specifying its name, the type of its elements, 
and the size of its dimensions. When we declare an array in C, the compiler allocates 
the memory block of the specified size to the array name.

To access individual elements within the array, you use the array name followed by an index enclosed in square brackets [].
Array indices in C start from 0. So, the first element of an array named 
data is accessed using data[0], the second element using data[1], and so on. 
These indexed elements can be used in calculations and operations.







Compiling the program using separate functions and .h files:

Separate Functions: To organize your code, you'll create functions to perform specific tasks, like calculating the sum or finding 
the maximum of the array elements. These function definitions will reside in one or more .c source files 
(e.g., array_operations.c). Each function will take the array (and potentially its size) as input and return the calculated result.

.h Files (Header Files): You'll create a header file (e.g., array_operations.h) that contains the declarations (prototypes)
of the functions defined in your .c file(s). These declarations tell the compiler about the existence, return type, and parameters of your functions.






consonant_processing.h (Header File): This file serves as an interface, declaring the prototypes (signatures) of all the functions that are defined 
in the consonant_processing.c file. It also includes definitions for constants (INITIAL_CAPACITY, INPUT_FILENAME, OUTPUT_FILENAME) and type definitions
(the ConsonantData structure) that are shared across different parts of the program.

#ifndef CONSONANT_PROCESSING_H
#define CONSONANT_PROCESSING_H

// Definitions
#define INITIAL_CAPACITY 10
#define INPUT_FILENAME "f9.txt"
#define OUTPUT_FILENAME "TU.txt"

// Type Definitions
typedef struct {
    char *consonants;
    int count;
    int capacity;
} ConsonantData;

// Prototypes (function declarations)
int is_vowel(char c);
int compare_chars_insensitive(const void *a, const void *b);
void initializeData(ConsonantData *data);
void readData(ConsonantData *data);
void processData(ConsonantData *data);
void writeData(const ConsonantData *data);
void freeData(ConsonantData *data);

#endif

consonant_processing.c (Source File - Function Definitions): This file contains the actual implementation (definition) of each function declared in consonant_processing.h. 
These functions encapsulate specific functionalities of the program, such as initializing data (initializeData), reading data from a file (readData),
processing the data (processData), writing the data to a file and console (writeData), and freeing dynamically allocated memory (freeData).

#include "consonant_processing.h" // Include the header file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

// Function Definitions

// Helper function to check if a character is a vowel
int is_vowel(char c) { /* ... function body ... */ }

// Helper comparison function for case-insensitive qsort
int compare_chars_insensitive(const void *a, const void *b) { /* ... function body ... */ }

// Function to initialize the ConsonantData structure
void initializeData(ConsonantData *data) { /* ... function body ... */ }

// Function to read data from the input file with dynamic allocation and error handling
void readData(ConsonantData *data) { /* ... function body ... */ }

// Function to process the extracted data (sort consonants - case-insensitive)
void processData(ConsonantData *data) { /* ... function body ... */ }

// Function to write the processed data to the console and output file with error handling
void writeData(const ConsonantData *data) { /* ... function body ... */ }

// Function to free the dynamically allocated memory
void freeData(ConsonantData *data) { /* ... function body ... */ }


main.c (Source File - Main Program Logic): This file contains the main function, which is the entry point of
the program. Its primary responsibility is to orchestrate the execution of the program by calling the various functions 
declared in consonant_processing.h and defined in consonant_processing.c.


#include <stdio.h>
#include "consonant_processing.h" // Include the header file

int main() {
    // Variable Declarations
    ConsonantData data;

    // Calls to Functions
    initializeData(&data);
    readData(&data);
    processData(&data);
    writeData(&data);
    freeData(&data);

    return 0;
}

n this C program, the separation of code into consonant_processing.h (header file), consonant_processing.c (source file with function definitions),
and main.c (source file with the main program logic) facilitates modularity and organization. The header file acts as an interface, declaring
function prototypes and shared data structures like ConsonantData, which are then implemented in consonant_processing.c. Both main.c and
consonant_processing.c use the #include "consonant_processing.h" directive to access these declarations, enabling the main function to call 
the defined functions (like initializeData, readData, etc.) and ensuring that the compiler and linker can correctly connect these calls to their 
implementations during the compilation process, ultimately creating a cohesive executable program where the main logic orchestrates the 
functionality provided by the separate module.










